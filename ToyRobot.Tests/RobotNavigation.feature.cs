// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ToyRobot.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RobotNavigationFeature : Xunit.IClassFixture<RobotNavigationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "RobotNavigation.feature"
#line hidden
        
        public RobotNavigationFeature(RobotNavigationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "RobotNavigation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Add Robot to Table")]
        [Xunit.TraitAttribute("FeatureTitle", "RobotNavigation")]
        [Xunit.TraitAttribute("Description", "Add Robot to Table")]
        [Xunit.InlineDataAttribute("1", "0", "0", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "0", "4", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("3", "4", "0", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("4", "2", "2", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("5", "4", "4", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("6", "0", "5", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("7", "5", "0", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("8", "-1", "2", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("9", "2", "-1", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("10", "-10", "-10", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        public virtual void AddRobotToTable(string id, string x, string y, string orientation, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Robot to Table", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
 testRunner.When(string.Format("I place the robot at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="ReAdd Robot to Table")]
        [Xunit.TraitAttribute("FeatureTitle", "RobotNavigation")]
        [Xunit.TraitAttribute("Description", "ReAdd Robot to Table")]
        [Xunit.InlineDataAttribute("1", "0", "0", "\"North\"", "0", "0", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("1", "0", "0", "\"North\"", "3", "3", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        public virtual void ReAddRobotToTable(string id, string x, string y, string orientation, string x_New, string y_New, string orientation_New, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ReAdd Robot to Table", exampleTags);
#line 23
this.ScenarioSetup(scenarioInfo);
#line 24
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And(string.Format("the robot is currently on the Table at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.When(string.Format("I readd the robot at {0} and {1} facing {2}", x_New, y_New, orientation_New), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And(string.Format("the Robot is on the Table at {0} and {1} facing {2}", x_New, y_New, orientation_New), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Move Robot when on Table")]
        [Xunit.TraitAttribute("FeatureTitle", "RobotNavigation")]
        [Xunit.TraitAttribute("Description", "Move Robot when on Table")]
        [Xunit.InlineDataAttribute("1a", "0", "0", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("1b", "0", "0", "\"South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("1c", "0", "0", "\"East\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("1d", "0", "0", "\"West\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2a", "0", "4", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2b", "0", "4", "\"South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2c", "0", "4", "\"East\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2d", "0", "4", "\"West\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("3a", "4", "0", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("3b", "4", "0", "\"South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("3c", "4", "0", "\"East\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("3d", "4", "0", "\"West\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("4a", "4", "4", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("4b", "4", "4", "\"South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("4c", "4", "4", "\"East\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("4d", "4", "4", "\"West\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("5a", "2", "2", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("5b", "2", "2", "\"South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("5c", "2", "2", "\"East\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("5d", "2", "2", "\"West\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("6a", "3", "3", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("6b", "3", "3", "\"South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("6c", "3", "3", "\"East\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("6d", "3", "3", "\"West\"", "\"Ok\"", "\"Ok\"", new string[0])]
        public virtual void MoveRobotWhenOnTable(string id, string x, string y, string orientation, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move Robot when on Table", exampleTags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And(string.Format("the robot is currently on the Table at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.When("I move the robot forward", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Move Robot when not on Table")]
        [Xunit.TraitAttribute("FeatureTitle", "RobotNavigation")]
        [Xunit.TraitAttribute("Description", "Move Robot when not on Table")]
        [Xunit.InlineDataAttribute("1", "\"Ok\"", "\"Ok\"", new string[0])]
        public virtual void MoveRobotWhenNotOnTable(string id, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move Robot when not on Table", exampleTags);
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 75
 testRunner.When("I move the robot forward", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 76
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Turn Robot when not on Table")]
        [Xunit.TraitAttribute("FeatureTitle", "RobotNavigation")]
        [Xunit.TraitAttribute("Description", "Turn Robot when not on Table")]
        [Xunit.InlineDataAttribute("1", "\"Left\"", "\"Ok\"", "\"Ok\"", new string[0])]
        public virtual void TurnRobotWhenNotOnTable(string id, string direction, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Turn Robot when not on Table", exampleTags);
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.When(string.Format("I turn the robot {0}", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Report Robot Position when on Table")]
        [Xunit.TraitAttribute("FeatureTitle", "RobotNavigation")]
        [Xunit.TraitAttribute("Description", "Report Robot Position when on Table")]
        [Xunit.InlineDataAttribute("1a", "0", "0", "\"North\"", new string[0])]
        [Xunit.InlineDataAttribute("1b", "0", "0", "\"South\"", new string[0])]
        [Xunit.InlineDataAttribute("1c", "0", "0", "\"East\"", new string[0])]
        [Xunit.InlineDataAttribute("1d", "0", "0", "\"West\"", new string[0])]
        [Xunit.InlineDataAttribute("2a", "3", "2", "\"North\"", new string[0])]
        [Xunit.InlineDataAttribute("2b", "3", "2", "\"South\"", new string[0])]
        [Xunit.InlineDataAttribute("2c", "3", "2", "\"East\"", new string[0])]
        [Xunit.InlineDataAttribute("2d", "3", "2", "\"West\"", new string[0])]
        public virtual void ReportRobotPositionWhenOnTable(string id, string x, string y, string orientation, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Report Robot Position when on Table", exampleTags);
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And(string.Format("the robot is currently on the Table at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.When("I Report the Robot Position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 99
 testRunner.Then(string.Format("the Robot is on the Table at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Report Robot Position after Valid Move")]
        [Xunit.TraitAttribute("FeatureTitle", "RobotNavigation")]
        [Xunit.TraitAttribute("Description", "Report Robot Position after Valid Move")]
        [Xunit.InlineDataAttribute("1", "3", "3", "\"North\"", "\"Ok\"", "\"Ok\"", "3", "4", "\"North\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "3", "3", "\"South\"", "\"Ok\"", "\"Ok\"", "3", "2", "\"South\"", new string[0])]
        [Xunit.InlineDataAttribute("3", "3", "3", "\"East\"", "\"Ok\"", "\"Ok\"", "4", "3", "\"East\"", new string[0])]
        [Xunit.InlineDataAttribute("4", "3", "3", "\"West\"", "\"Ok\"", "\"Ok\"", "2", "3", "\"West\"", new string[0])]
        public virtual void ReportRobotPositionAfterValidMove(string id, string x, string y, string orientation, string status, string message, string x_Result, string y_Result, string orientation_Result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Report Robot Position after Valid Move", exampleTags);
#line 112
this.ScenarioSetup(scenarioInfo);
#line 113
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 114
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 115
 testRunner.And(string.Format("the robot is currently on the Table at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 116
 testRunner.When("I move the robot forward", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 117
 testRunner.And("I Report the Robot Position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 118
 testRunner.Then(string.Format("the Robot is on the Table at {0} and {1} facing {2}", x_Result, y_Result, orientation_Result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Report Robot Position after Invalid Move")]
        [Xunit.TraitAttribute("FeatureTitle", "RobotNavigation")]
        [Xunit.TraitAttribute("Description", "Report Robot Position after Invalid Move")]
        [Xunit.InlineDataAttribute("1", "0", "4", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "0", "0", "\"South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("3", "4", "0", "\"East\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("4", "0", "0", "\"West\"", "\"Ok\"", "\"Ok\"", new string[0])]
        public virtual void ReportRobotPositionAfterInvalidMove(string id, string x, string y, string orientation, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Report Robot Position after Invalid Move", exampleTags);
#line 127
this.ScenarioSetup(scenarioInfo);
#line 128
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 129
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 130
 testRunner.And(string.Format("the robot is currently on the Table at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 131
 testRunner.When("I move the robot forward", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 132
 testRunner.And("I Report the Robot Position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 133
 testRunner.Then(string.Format("the Robot is on the Table at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Report Robot Position after Turn")]
        [Xunit.TraitAttribute("FeatureTitle", "RobotNavigation")]
        [Xunit.TraitAttribute("Description", "Report Robot Position after Turn")]
        [Xunit.InlineDataAttribute("1", "3", "3", "\"North\"", "\"Left\"", "3", "3", "\"West\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "3", "3", "\"North\"", "\"Right\"", "3", "3", "\"East\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("3", "3", "3", "\"South\"", "\"Left\"", "3", "3", "\"East\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("4", "3", "3", "\"South\"", "\"Right\"", "3", "3", "\"West\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("5", "3", "3", "\"East\"", "\"Left\"", "3", "3", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("6", "3", "3", "\"East\"", "\"Right\"", "3", "3", "\"South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("7", "3", "3", "\"West\"", "\"Left\"", "3", "3", "\"South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("8", "3", "3", "\"West\"", "\"Right\"", "3", "3", "\"North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        public virtual void ReportRobotPositionAfterTurn(string id, string x, string y, string orientation, string direction, string x_Result, string y_Result, string orientation_Result, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Report Robot Position after Turn", exampleTags);
#line 142
this.ScenarioSetup(scenarioInfo);
#line 143
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 144
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
 testRunner.And(string.Format("the robot is currently on the Table at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
 testRunner.When(string.Format("I turn the robot {0}", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 147
 testRunner.And("I Report the Robot Position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 148
 testRunner.Then(string.Format("the Robot is on the Table at {0} and {1} facing {2}", x_Result, y_Result, orientation_Result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RobotNavigationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RobotNavigationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

