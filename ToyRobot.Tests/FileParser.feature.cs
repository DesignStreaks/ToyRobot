// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ToyRobot.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FileParserFeature : Xunit.IClassFixture<FileParserFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FileParser.feature"
#line hidden
        
        public FileParserFeature(FileParserFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FileParser", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Validate Place Commands")]
        [Xunit.TraitAttribute("FeatureTitle", "FileParser")]
        [Xunit.TraitAttribute("Description", "Validate Place Commands")]
        [Xunit.InlineDataAttribute("1", "\"0, 0, North\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "\"8, 0, South\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("3", "\"\"", "\"Error\"", "\"Place command requires 3 arguments\"", new string[0])]
        [Xunit.InlineDataAttribute("4", "\" , 0, North\"", "\"Error\"", "\"Place command invalid \'x\' argument\"", new string[0])]
        [Xunit.InlineDataAttribute("5", "\"0 , , North\"", "\"Error\"", "\"Place command invalid \'y\' argument\"", new string[0])]
        [Xunit.InlineDataAttribute("6", "\"0 , 0, \"", "\"Error\"", "\"Place command invalid \'orientation\' argument\"", new string[0])]
        [Xunit.InlineDataAttribute("7", "\"0 , 0, asdf\"", "\"Error\"", "\"Place command invalid \'orientation\' argument\"", new string[0])]
        public virtual void ValidatePlaceCommands(string id, string arguments, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Place Commands", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given(string.Format("I have a command with the {0}", arguments), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When("I validate the Place command parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 7
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Validate Move Commands")]
        [Xunit.TraitAttribute("FeatureTitle", "FileParser")]
        [Xunit.TraitAttribute("Description", "Validate Move Commands")]
        [Xunit.InlineDataAttribute("1", "\"\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "\"asdf\"", "\"Error\"", "\"Move command invalid argument count\"", new string[0])]
        public virtual void ValidateMoveCommands(string id, string arguments, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Move Commands", exampleTags);
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given(string.Format("I have a command with the {0}", arguments), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I validate the command Move command parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Validate Left Commands")]
        [Xunit.TraitAttribute("FeatureTitle", "FileParser")]
        [Xunit.TraitAttribute("Description", "Validate Left Commands")]
        [Xunit.InlineDataAttribute("1", "\"\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "\"asdf\"", "\"Error\"", "\"Left command invalid argument count\"", new string[0])]
        public virtual void ValidateLeftCommands(string id, string arguments, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Left Commands", exampleTags);
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given(string.Format("I have a command with the {0}", arguments), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When("I validate the command Left command parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Validate Right Commands")]
        [Xunit.TraitAttribute("FeatureTitle", "FileParser")]
        [Xunit.TraitAttribute("Description", "Validate Right Commands")]
        [Xunit.InlineDataAttribute("1", "\"\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "\"asdf\"", "\"Error\"", "\"Right command invalid argument count\"", new string[0])]
        public virtual void ValidateRightCommands(string id, string arguments, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Right Commands", exampleTags);
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given(string.Format("I have a command with the {0}", arguments), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When("I validate the command Right command parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute(DisplayName="Validate Report Commands")]
        [Xunit.TraitAttribute("FeatureTitle", "FileParser")]
        [Xunit.TraitAttribute("Description", "Validate Report Commands")]
        [Xunit.InlineDataAttribute("1", "\"\"", "\"Ok\"", "\"Ok\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "\"asdf\"", "\"Error\"", "\"Report command invalid argument count\"", new string[0])]
        public virtual void ValidateReportCommands(string id, string arguments, string status, string message, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Report Commands", exampleTags);
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given(string.Format("I have a command with the {0}", arguments), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 54
 testRunner.When("I validate the command Report command parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 56
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FileParserFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FileParserFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

